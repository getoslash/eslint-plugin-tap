/**
 * Tap assert methods.
 *
 * `arguments` is number of arguments it takes to make user add a `message` argument.
 *
 * @see https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/tap/index.d.ts
 */
export const tapAssertMethods = {
  ok: { arguments: 2 },
  notOk: { arguments: 2 },
  error: { arguments: 2 },
  emits: { arguments: 3 },
  rejects: { arguments: 2 },
  resolves: { arguments: 2 },
  resolveMatch: { arguments: 3 },
  resolveMatchSnapshot: { arguments: 2 },
  matchSnapshot: { arguments: 2 },
  throws: { arguments: 3 },
  doesNotThrow: { arguments: 2 },
  expectUncaughtException: { arguments: 3 },
  equal: { arguments: 3 },
  not: { arguments: 3 },
  same: { arguments: 3 },
  notSame: { arguments: 3 },
  strictSame: { arguments: 3 },
  strictNotSame: { arguments: 3 },
  hasStrict: { arguments: 3 },
  match: { arguments: 3 },
  has: { arguments: 3 },
  hasProp: { arguments: 3 },
  hasProps: { arguments: 3 },
  hasOwnProp: { arguments: 3 },
  hasOwnProps: { arguments: 3 },
  notMatch: { arguments: 3 },
  type: { arguments: 3 },
} as const

/**
 * Methods/aliases depecrated as of Tap v15.
 *
 * @see https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/tap/index.d.ts
 */
export const tapDeprecatedAssertMethods = {
  true: { replacement: 'ok' },
  assert: { replacement: 'ok' },
  tearDown: { replacement: 'teardown' },
  false: { replacement: 'notOk' },
  ifErr: { replacement: 'error' },
  ifError: { replacement: 'error' },
  notThrow: { replacement: 'doesNotThrow' },
  throw: { replacement: 'throws' },
  equals: { replacement: 'equal' },
  isEqual: { replacement: 'equal' },
  is: { replacement: 'equal' },
  strictEqual: { replacement: 'equal' },
  strictEquals: { replacement: 'equal' },
  strictIs: { replacement: 'equal' },
  isStrict: { replacement: 'equal' },
  isStrictly: { replacement: 'equal' },
  notEqual: { replacement: 'not' },
  notEquals: { replacement: 'not' },
  inequal: { replacement: 'not' },
  notStrictEqual: { replacement: 'not' },
  notStrictEquals: { replacement: 'not' },
  isNotEqual: { replacement: 'not' },
  isNot: { replacement: 'not' },
  doesNotEqual: { replacement: 'not' },
  isInequal: { replacement: 'not' },
  equivalent: { replacement: 'same' },
  looseEqual: { replacement: 'same' },
  looseEquals: { replacement: 'same' },
  deepEqual: { replacement: 'same' },
  deepEquals: { replacement: 'same' },
  isLoose: { replacement: 'same' },
  looseIs: { replacement: 'same' },
  inequivalent: { replacement: 'notSame' },
  looseInequal: { replacement: 'notSame' },
  notDeep: { replacement: 'notSame' },
  deepInequal: { replacement: 'notSame' },
  notLoose: { replacement: 'notSame' },
  looseNot: { replacement: 'notSame' },
  strictEquivalent: { replacement: 'strictSame' },
  strictDeepEqual: { replacement: 'strictSame' },
  sameStrict: { replacement: 'strictSame' },
  deepIs: { replacement: 'strictSame' },
  isDeeply: { replacement: 'strictSame' },
  isDeep: { replacement: 'strictSame' },
  strictDeepEquals: { replacement: 'strictSame' },
  strictInequivalent: { replacement: 'strictNotSame' },
  strictDeepInequal: { replacement: 'strictNotSame' },
  notSameStrict: { replacement: 'strictNotSame' },
  deepNot: { replacement: 'strictNotSame' },
  notDeeply: { replacement: 'strictNotSame' },
  strictDeepInequals: { replacement: 'strictNotSame' },
  notStrictSame: { replacement: 'strictNotSame' },
  matches: { replacement: 'match' },
  similar: { replacement: 'match' },
  like: { replacement: 'match' },
  isLike: { replacement: 'match' },
  isSimilar: { replacement: 'match' },
  dissimilar: { replacement: 'notMatch' },
  unsimilar: { replacement: 'notMatch' },
  notSimilar: { replacement: 'notMatch' },
  unlike: { replacement: 'notMatch' },
  isUnlike: { replacement: 'notMatch' },
  notLike: { replacement: 'notMatch' },
  isNotLike: { replacement: 'notMatch' },
  doesNotHave: { replacement: 'notMatch' },
  isNotSimilar: { replacement: 'notMatch' },
  isDissimilar: { replacement: 'notMatch' },
  isa: { replacement: 'type' },
  isA: { replacement: 'type' },
  hasFields: { replacement: 'has' },
  includes: { replacement: 'has' },
  include: { replacement: 'has' },
  contains: { replacement: 'has' },
} as const

export const tapTestHelperMethods = [
  'end',
  'endAll',
  'plan',
  'test',
  'teardown',
  'todo',
  'pass',
  'fail',
  'comment',
  'bailout',
] as const

export const tapTopLevelMethods = [
  'test',
  'skip',
  'only',
  'Test',
  'prototype',
  'addAssert',
] as const
